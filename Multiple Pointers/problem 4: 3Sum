Q)3Sum
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example :

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[1] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Solution:

function threeSum(nums) {
  nums.sort((a, b) => a - b);
  const res = [];

  nums.forEach((value, idx) => {
    if (idx > 0 && value === nums[idx - 1]) return; // if current value is equal to previous value return
    let left = idx + 1, // left should be always one greater than current index
      right = nums.length - 1;

    while (left < right) {
      let sum = value + nums[left] + nums[right];
      if (sum > 0) {
        right--;
      } else if (sum < 0) {
        left++;
      } else {
        res.push([value, nums[left], nums[right]]);
        // line 36 and 37 is for handeling duplicates
        left++;
        while (left < right && nums[left] === nums[left - 1]) left++;
      }
    }
  });
  return res;
}
