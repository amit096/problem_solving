/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

// read the answer and then try to implement it again 

const express = require('express');
const fs = require('fs');
const todosList = require('./todos.json');
const app = express();
const port = 3000;

app.use(express.json({ extended: true }));// for body parser

let todos = todosList;

function writeTodoList(newTodos) {
  const jsonTodos = JSON.stringify(newTodos, null, 2); // Convert to JSON with indentation (null, 2)

  fs.writeFile('./todos.json', jsonTodos, 'utf-8', (err) => {
    if (err) {
      console.log(err);
      throw new Error();
    }
  });
}

app.get('/todos', (req, res) => {
  res.json(todos);
});

app.get('/todos/:id', (req, res) => {
  let index = todos.findIndex((todo) => todo.id === parseInt(req.params.id));
  if (index === -1) {
    res.sendStatus(404);
  } else {
    res.json(todos[index]);
  }
});

app.post('/todos', (req, res) => {
  try {
    let newTodo = {
      id: Math.floor(Math.random() * 1000000), // unique random id
      title: req.body.title,
      description: req.body.description
    }
    todos.push(newTodo);
    writeTodoList(todos);
    res.status(201).send(newTodo);
  } catch (err) {
    res.sendStatus(500);
  }
});

app.put('/todos/:id', (req, res) => {
  try {
    let index = todos.findIndex((todo) => todo.id === parseInt(req.params.id));
    if (index === -1) {
      res.status(404).send();
    } else {
      todos[index] = { ...todos[index], ...req.body };
      writeTodoList(todos);
      res.json(todos[index]);
    }
  } catch (err) {
    res.sendStatus(500);
  }
});

app.delete('/todos/:id', (req, res) => {
  try {
    let index = todos.findIndex((todo) => todo.id === parseInt(req.params.id));
    if (index === -1) {
      res.sendStatus(404);
    } else {
      todos.splice(index, 1);
      writeTodoList(todos);
      res.status(200).send();
    }
  } catch (err) {
    res.sendStatus(500);
  }
});

app.patch('/todos/:id', (req, res) => {
  let index = todos.findIndex((todo) => todo.id === parseInt(req.params.id));
  if (index === -1) {
    res.sendStatus(404);
  } else {
    todos[index].description = req.body.description;
    res.status(200).send(todos[index]);
  }
});


app.use((req, res, next) => { // this should be used in last it chaeck all the paths are valid or not 
  res.status(404).send('Path not found');
});

app.listen(port, () => {
  console.log(`server running at port ${port}`);
});

module.exports = app;